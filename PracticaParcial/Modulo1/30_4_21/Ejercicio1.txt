1 5 15
Tema 1)

// Resolver con SENTENCIAS AWAIT (<> y/o <await B; S>) el siguiente problema. Se debe calcular el
// valor promedio de un vector de 1000 números por medio de 10 procesos. Al finalizar todos los procesos
// deben guardar en una variable local el resultado final. Nota: maximizar la concurrencia.

int arr[1000]= ... ;
double promedio=0;
int terminados=0;

Process calcular[id:0..9]{
    int sum=0;
    for (i=0;i<100;i++){
        sum+=arr[10*i+id];
    }
    <promedio+=promedio + sum/100>;
    <terminados+=1>;
    <await (terminados==10)>;
    double promedioLocal=prom;
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Tema 2)

// Resolver con SENTENCIAS AWAIT (<> y/o <await B; S>) el siguiente problema. Se debe realizar el
// producto escalar de dos vectores A y B de 1000 números (como se muestra en la fórmula r=sum(A[i]*B[i], 0, 999))
// utilizando 10 procesos. Al terminar todos los procesos deben guardarse en una variable local el resultado final r. 
// Nota: maximizar concurrencia.

int A[1000]= ... ;
int B[1000]= ... ;
int prod=0;

Process multiplicador[id:0..9]{
    int temp=0;
    int total;
    for (int i=id;i<1000;i+=10){
        temp+=A[i]*B[i];
    }
    <prod+=temp>;
    total=prod;
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Tema 3)

// Resolver con SENTENCIAS AWAIT (<> y/o <await B; S>) el siguiente problema. En una playa hay 5
// personas que deben juntar 15 monedas cada una y obtener el TOTAL de dinero juntado entre todos (la
// suma del valor de las 75 monedas que pueden ser de 1, 2 o 5 pesos). Al terminar todos los procesos deben
// guardarse en una variable local el TOTAL. Nota: maximizar la concurrencia. Suponga que existe una
// función Moneda() llamada por las personas que simula encontrar UNA moneda y retorna el valor de la
// misma. Cada persona trabaja sobre una zona diferente de la playa.

int total=0;

Process persona[id:0..4]{
    int suma=0;
    int totalLocal;
    for(int i=0;i<15;i++){
        suma+=Moneda();
    }
    <total+=suma>;
    totalLocal=total;
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~