1 5 15
Tema 1)

// Resolver el siguiente problema con MONITORES. Simular el funcionamiento de un Complejo de
// Canchas de Futbol 5 que posee 8 canchas y donde hay una máquina encargada de asignar las canchas. Al
// complejo acuden 80 jugadores divididos en 8 grupos (cada grupo tiene las 10 personas que jugarán en una
// cancha), cada jugador ya conoce a qué grupo pertenece. Cuando un jugador llega le indica a la máquina el
// grupo al que pertenece para que esta le indique el número de cancha a la cual debe ir, y luego se dirige a ella.
// Cuando los 10 integrantes de un grupo han llegado a la cancha que les corresponde, comienzan a jugar el
// partido que dura 50 minutos; y luego se retiran. La máquina asigna el número de cancha de acuerdo al orden
// en que llega el primer jugador de cada grupo. Nota: maximizar la concurrencia.

Process jugador[id:0..79]{
    int grupo= ... ; //El jugador ya conoce su grupo
    int cancha;
    maquina.acceso(grupo, cancha)
    cancha[cancha].jugar();
}

Process maquina{
    int grupo;
    int canchas[8]=-1;
    int cancha=1;
    while(true){
        gestor.proximo(grupo);
        if (canchas[grupo]==-1) {
            canchas[grupo]=cancha;
            cancha= (cancha) mod 8 + 1;
        }
        else cancha=cancha[grupo];
        gestor.entregarCancha(grupo, cancha);
    }
}

Process partido[id:1..8]{
    cancha.comenzar();
    delay(50);
    cancha.finalizar();
}

Monitor cancha[id:1..8]{
    int presentes=0;

    Procedure jugar{
        presentes++;
        if(presentes<10){
            wait(noPresentes);
        }
        else signal_all(noPresentes);
        wait(finalizarPartido);
    }

    Procedure comenzar(){
        if(presentes<10) wait(noPresentes)
    }

    Procedure finalizar(){
        signal_all(finalizarPartido);
    }
}

Monitor gestor{
    int canchas[8];
    queue cola
    cond espera, cvMaquina;

    Procedure acceso(grupo:in int; cancha:out int){
        if(canchas[grupo]==-1){
            push(cola, grupo);
            signal(cvMaquina);
            wait(espera);
        }
        cancha=canchas[grupo];

    }

    Procedure proximo(group:out int){
        if(empty(cola)) wait(cvMaquina);
        pop(cola, group);
    }

    Procedure entregarCancha(grupo:in int; cancha:in int){
        canchas[grupo]=cancha;
        signal(espera);
    }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Tema 2)

// Resolver el siguiente problema con MONITORES. Simular el funcionamiento de un Entrenamiento de
// Básquet donde hay 20 jugadores y 2 canchas donde entrenar. Los jugadores se van distribuyendo entre las
// canchas en forma cíclica de acuerdo al orden de llegada (el primero va a la cancha 1, el segundo a la 2, el
// tercer a la 1, y así sucesivamente). Cuando un jugador llega determina la cancha a la cual debe ir y se dirige a
// ella a esperar a que lleguen los 10 de esa cancha. Cuando todos los jugadores de una cancha han llegado,
// juegan un partido de 40 minutos y se retiran. Nota: maximizar la concurrencia.

Process jugadores[id:0..19]{
    int canchaElegida;
    selectorCancha.elegirCancha(id, canchaElegida);
    cancha[canchaElegida].jugar();
}

Process partido[id:0..1]{
    cancha[id].comenzar();
    delay(40);
    cancha[id].finalizar();
}

Process gestor{
    int total=0;
    int cancha=0;
    while(total<20){
        selectorCancha.siguiente(id);
        cancha=(cancha + 1) mod 2;
        selectorCancha.devolverCancha(id, cancha);
        total++;
    }
}

Monitor selectorCancha{
    int canchas[20];
    int esperando=0;
    queue cola;
    cond cvEspera, cvSiguiente;

    Procedure elegirCancha(id:in int; cancha:out int){
        esperando++;
        push(cola, id);
        signal(cvSiguiente);
        wait(cvEspera);
        cancha=canchas[id]
    }

    Procedure siguiente(id:out int){
        if(esperando==0) wait(cvSiguiente);
        pop(cola, id);
    }

    Procedure devolverCancha(id:in int; cancha:in int){
        canchas[id]=cancha;
        signal(cvEspera);
        esperando--;
    }
}

Monitor cancha[id:0..1]{
    cond espera, cvPartido, jugando;
    int presentes=0;
    Procedure jugar(){
        presentes++;
        if(presentes<10) wait(espera);
        else {signal_all(espera); signal(cvPartido)};
        wait(jugando);
    }

    Procedure comenzar(){
        if (presentes<10) wait(cvPartido);
    }

    Procedure finalizar(){
        signal_all(jugando);
    }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Tema 3)

// Resolver el siguiente problema con MONITORES. Simular el funcionamiento de un Complejo de
// Canchas de Paddle que posee 10 canchas y donde hay UN robot encargado de distribuir a las personas en
// las canchas. Al complejo acuden 40 personas a jugar. Cuando una persona llega el robot le indique el
// número de cancha a la cual debe ir, para que se dirija a ella; cuando han llegado los 4 jugadores a la cancha,
// comienzan a jugar el partido que dura 60 minutos; al terminar el partido las 4 personas se retiran. El
// encargado asigna el número de cancha según el orden de llegada (los 4 primeros a la cancha 1, los siguientes
// 4 a la 2 y así sucesivamente). Nota: maximizar la concurrencia.

Process jugadores[id:0..39]{
    int idCancha;
    gestor.pedirCancha(id, idCancha)
    cancha[idCancha].jugar();
}

Process partido[id:0..9]{
    cancha.comenzar();
    delay(60);
    cancha.finalizar();
}

Process robot{
    int cancha=0;
    int aux=0;
    int id;
    while(true){
        gestor.siguiente(id);
        aux++;
        cancha=aux div 4;
        gestor.devolverCancha(id, cancha);
    }
}

Monitor gestor{
    
    Procedure pedirCancha(id:in int; idCancha:out int){
        push(cola, id);
        signal(cvRobot);
        wait(espera[id]);
        idCancha=canchas[id];
    }

    Procedure siguiente(id:out int){
        if(empty(cola)) wait(cvRobot);
        pop(cola, id);
    }

    Procedure devolverCancha(id:in int; idCancha:in int){
        canchas[id]=idCancha;
        signal(espera[id]);
    }
}

Monitor cancha[id:0..9]{
    cond noPresentes, cvPartido, jugando;
    int presentes=0;

    Procedure jugar(){
        presentes++;
        if(presentes<4) wait(noPresentes);
        else {
            signal_all(noPresentes);
            signal(cvPartido);
        }
        wait(jugando);
    }

    Procedure comenzar(){
        if (presentes<4) wait(cvPartido);
    }

    Procedure finalizar(){
        signal_all(jugando);
    }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~